{"ast":null,"code":"var _jsxFileName = \"/Users/kushpanjabi/Desktop/Noteful/src/AddNote.js\";\nimport React, { Component } from 'react';\nimport NoteContext from './NoteContext';\nimport { findFolderByName } from './helpful-constants';\nimport PropTypes from 'prop-types';\nimport './AddNote.css'; // const Required = () => (\n//     <span className='AddBookmark__required'>*</span>\n//   )\n\nclass AddNote extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: null,\n      name: {\n        value: '',\n        touched: false\n      },\n      content: {\n        value: '',\n        touched: false\n      }\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const _e$target = e.target,\n            name = _e$target.name,\n            content = _e$target.content,\n            folderName = _e$target.folderName;\n      const _this$context$folders = this.context.folders,\n            folders = _this$context$folders === void 0 ? [] : _this$context$folders;\n      const folder = findFolderByName(folders, folderName.value);\n\n      const getRandomInt = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      };\n\n      const randId = getRandomInt(1000, 9999);\n      let noteId = \"d26e\".concat(randId, \"-ffaf-11e8-8eb2-f2801f1b9fd1\");\n      let dateModified = new Date();\n      const note = {\n        id: noteId,\n        name: name.value,\n        modified: dateModified,\n        folderId: folder.id,\n        content: content.value\n      };\n      this.setState({\n        error: null\n      });\n      fetch('http://localhost:9090/notes', {\n        method: 'POST',\n        body: JSON.stringify(note),\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res => {\n        if (!res.ok) {\n          return res.json().then(error => {\n            throw error;\n          });\n        }\n\n        return res.json();\n      }).then(data => {\n        noteId = '';\n        note.name = '';\n        note.modified = '';\n        note.folderId = '';\n        note.content = '';\n        this.context.addNote(data);\n        this.props.history.push('/');\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          error\n        });\n      });\n    };\n\n    this.handleClickCancel = () => {\n      this.props.history.push('/');\n    };\n  }\n\n  updateNoteName(name) {\n    this.setState({\n      name: {\n        value: name,\n        touched: true\n      }\n    });\n  }\n\n  updateNoteContent(content) {\n    this.setState({\n      content: {\n        value: content,\n        touched: true\n      }\n    });\n  }\n\n  validateName() {\n    const name = this.state.name.value.trim();\n    const notesList = this.context.notes.map(note => note.name);\n\n    if (notesList.includes(name)) {\n      return 'That note title already exists. Please choose another.';\n    }\n  }\n\n  validateContent() {\n    const content = this.state.content.value.trim();\n\n    if (content.length === 0) {\n      return 'Note cannot be empty.';\n    }\n  }\n\n  render() {\n    const error = this.state.error;\n    const _this$context$folders2 = this.context.folders,\n          folders = _this$context$folders2 === void 0 ? [] : _this$context$folders2;\n    const noteContentError = this.validateContent();\n    const noteNameError = this.validateName();\n    let noteErrorExists = false;\n\n    if (noteNameError) {\n      noteErrorExists = true;\n    }\n\n    let noteContentErrorExists = false;\n\n    if (noteContentError) {\n      noteContentErrorExists = true;\n    }\n\n    return React.createElement(\"section\", {\n      className: \"AddNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"New Note\"), React.createElement(\"form\", {\n      className: \"addNote__form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"AddNote__error\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, error.message), this.state.name.touched && noteNameError), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Title of note\",\n      onChange: e => this.updateNoteName(e.target.value),\n      \"aria-required\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      role: \"textbox\",\n      name: \"content\",\n      id: \"content\",\n      \"aria-multiline\": \"true\",\n      onChange: e => this.updateNoteContent(e.target.value),\n      \"aria-label\": \"content of note\",\n      \"aria-required\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"folderName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Folder\"), React.createElement(\"select\", {\n      name: \"folderName\",\n      id: \"folderName\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, folders.map(folder => React.createElement(\"option\", {\n      key: folder.id,\n      value: folder.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, folder.name)))), this.folderId, React.createElement(\"div\", {\n      className: \"AddNote__buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleClickCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: noteErrorExists || noteContentErrorExists,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Save\"))));\n  }\n\n}\n\nAddNote.contextType = NoteContext;\nexport default AddNote;\nAddNote.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  modified: PropTypes.instanceOf(Date),\n  folderId: PropTypes.string,\n  content: PropTypes.string\n};","map":{"version":3,"sources":["/Users/kushpanjabi/Desktop/Noteful/src/AddNote.js"],"names":["React","Component","NoteContext","findFolderByName","PropTypes","AddNote","state","error","name","value","touched","content","handleSubmit","e","preventDefault","target","folderName","context","folders","folder","getRandomInt","min","max","Math","ceil","floor","random","randId","noteId","dateModified","Date","note","id","modified","folderId","setState","fetch","method","body","JSON","stringify","headers","then","res","ok","json","data","addNote","props","history","push","catch","console","log","handleClickCancel","updateNoteName","updateNoteContent","validateName","trim","notesList","notes","map","includes","validateContent","length","render","noteContentError","noteNameError","noteErrorExists","noteContentErrorExists","message","contextType","propTypes","string","instanceOf"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport NoteContext from './NoteContext';\nimport { findFolderByName } from './helpful-constants';\nimport PropTypes from 'prop-types';\nimport './AddNote.css';\n\n// const Required = () => (\n//     <span className='AddBookmark__required'>*</span>\n//   )\n\nclass AddNote extends Component {\n  static contextType = NoteContext;\n  \n  state = {\n        error: null,\n        name: {\n            value: '',\n            touched: false\n        },\n        content: {\n            value: '',\n            touched: false\n        }\n  }\n\n  updateNoteName(name) {\n    this.setState({\n        name: {\n            value: name,\n            touched: true\n        }\n    })\n  }\n\n  updateNoteContent(content) {\n    this.setState({\n        content: {\n            value: content,\n            touched: true\n        }\n    })\n  }\n\n  validateName() {\n    const name = this.state.name.value.trim();\n    const notesList = this.context.notes.map(note => note.name);\n    if (notesList.includes(name)) {\n        return 'That note title already exists. Please choose another.';\n    }\n  }\n\n  validateContent() {\n    const content = this.state.content.value.trim();\n    if (content.length === 0) {\n        return 'Note cannot be empty.';\n    }\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, content, folderName } = e.target;\n    const {folders=[]} = this.context;\n    const folder = findFolderByName(folders, folderName.value);\n\n    const getRandomInt = (min, max) => {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min; \n    }\n    const randId = getRandomInt(1000, 9999);\n    let noteId = `d26e${randId}-ffaf-11e8-8eb2-f2801f1b9fd1`;\n    let dateModified = new Date();\n\n    const note = {\n        id: noteId,\n        name: name.value,\n        modified: dateModified,\n        folderId: folder.id,\n        content: content.value\n    };\n\n    this.setState({error: null})\n\n    fetch('http://localhost:9090/notes', {\n        method: 'POST',\n        body: JSON.stringify(note),\n        headers: {\n            'content-type': 'application/json'\n        }\n    })\n    .then(res => {\n        if (!res.ok) {\n            return res.json().then(error => {\n                throw error\n            })\n        }\n        return res.json()\n    })\n    .then(data => {\n        noteId = ''\n        note.name = ''\n        note.modified = ''\n        note.folderId = ''\n        note.content = ''\n        this.context.addNote(data)\n        this.props.history.push('/')\n    })\n    .catch(error => {\n        console.log(error)\n        this.setState({ error })\n    })\n  }\n\n  handleClickCancel = () => {\n    this.props.history.push('/')\n  }\n\n  render() {\n    const { error } = this.state;\n    const {folders=[]} = this.context;\n    const noteContentError = this.validateContent();\n    const noteNameError = this.validateName();\n\n    let noteErrorExists = false;\n    if (noteNameError) {\n        noteErrorExists = true;\n    } \n    let noteContentErrorExists = false;\n    if (noteContentError) {\n        noteContentErrorExists = true;\n    }\n     \n    return (\n        <section className='AddNote'>\n            <h2>New Note</h2>\n            <form\n                className='addNote__form'\n                onSubmit={this.handleSubmit}>\n                <div className='AddNote__error' role='alert'>\n                {error && <p>{error.message}</p>}\n                {this.state.name.touched && noteNameError}\n                </div>\n\n                <div>\n                    <label htmlFor='name'>\n                        Name\n                    </label>\n                    <input\n                        type='text'\n                        name='name'\n                        id='name'\n                        placeholder='Title of note'\n                        onChange={e => this.updateNoteName(e.target.value)}\n                        aria-required='true' />\n                </div>\n\n                <div>\n                    <textarea \n                        role='textbox'\n                        name='content' \n                        id='content'\n                        aria-multiline='true'\n                        onChange={e => this.updateNoteContent(e.target.value)}\n                        aria-label='content of note'\n                        aria-required='true'\n                        >\n                    </textarea>\n                </div>\n\n                <div>\n                    <label htmlFor='folderName'>\n                        Folder\n                    </label>\n                    <select \n                        name='folderName'\n                        id='folderName'\n                        required>\n                        {folders.map(folder =>\n                        <option \n                            key={folder.id} \n                            value={folder.name}>\n                            {folder.name}\n                        </option>)}\n                    </select>\n                </div>\n\n                {this.folderId}\n\n                <div className='AddNote__buttons'>\n                    <button type='button' onClick={this.handleClickCancel}>\n                        Cancel\n                    </button>\n                    <button type='submit'  disabled={noteErrorExists || noteContentErrorExists}>\n                        Save\n                    </button>\n                </div>\n            </form>\n        </section>\n    )\n  }\n}\n\nexport default AddNote;\n\nAddNote.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string,\n    modified: PropTypes.instanceOf(Date),\n    folderId: PropTypes.string,\n    content: PropTypes.string\n}"]},"metadata":{},"sourceType":"module"}